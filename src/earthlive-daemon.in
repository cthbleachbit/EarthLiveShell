#!/bin/bash
#==========================================================
# EarthLiveShell
# Background Daemon Script
# Copyright (C) James Chai (cth451) <cth451@gmail.com>
# Inspired by bitdust's [ https://github.com/bitdust ]
# Licensed under LGPL 3
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#==========================================================

# interval between image checking in minutes
opt_interval=${1}
# image density 
opt_density=${2}

opt_store="${HOME}/.earthliveshell"
opt_log="${opt_store}/EarthLive.log"
last=""

log () {
	case "$1" in
		1)	printf "%b" '[Err]' >> "${opt_log}";;
		2)	printf "%b" '[Inf]' >> "${opt_log}";;
	esac
	printf "[%b] " $(date +%F-%T-%Z) >> "${opt_log}"
	printf "%b\n" "$2" >> "${opt_log}"
}
# log [level] [info]

echo $$ > ${opt_store}/pid
log 2 "Starting with param $1 $2"

while ((1)); do
	img_json=$(curl -Ss "http://himawari8.nict.go.jp/img/D531106/latest.json")
	if (( $? )); then
		log 1 "Refresh failed!"
	else
		log 2 "Fetched Information from web."
		if [[ ! "${last}" = "${img_json}" ]]; then
			last=${img_json}
			now=${img_json:9:19}
			# Strip time from json
			
			cdn_prefix="@cdn_prefix@"
			url_prefix="http://himawari8-dl.nict.go.jp/himawari8/img/D531106/${opt_density}d/550/"
			url_time="${now:0:4}/${now:5:2}/${now:8:2}/${now:11:2}${now:14:2}${now:17:2}"
			# yyyy/mm/dd/hhmmss
			
			rm -f ${opt_store}/tile_*.png
			for ((i=0; i<opt_density; i++)); do
				for ((k=0; k<opt_density; k++)); do
					url_suffix="_${i}_${k}.png"
					url="${cdn_prefix}${url_prefix}${url_time}${url_suffix}"
					curl -Ss -o "${opt_store}/tile_${k}_${i}.png" "$url"
					(( $? )) || log 2 "Obtained tile ${k}_${i} at ${now}"
					(( $? )) && log 1 "Failed to get tile ${k}_${i} at ${now}"
				done
			done
			
			if [[ $opt_density -eq 1 ]]; then
				cp "${opt_store}/tile_0_0.png" "${opt_store}/final.png"
			else
				montage "${opt_store}/tile_*_*.png" -tile ${opt_density}x${opt_density} -geometry +0+0 "${opt_store}/final.png"
			fi
			# orig.png will be a concatenated picture in the future versions
		fi
	fi
	for ((i=0; i<opt_interval; i++)); do
		sleep 60
	done
done
